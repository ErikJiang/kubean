// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apis "github.com/kubean-io/kubean-api/apis"
	clusteroperationv1alpha1 "github.com/kubean-io/kubean-api/apis/clusteroperation/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// SpecApplyConfiguration represents a declarative configuration of the Spec type for use
// with apply.
type SpecApplyConfiguration struct {
	Cluster               *string                                `json:"cluster,omitempty"`
	HostsConfRef          *apis.DataRef                          `json:"hostsConfRef,omitempty"`
	VarsConfRef           *apis.DataRef                          `json:"varsConfRef,omitempty"`
	SSHAuthRef            *apis.DataRef                          `json:"sshAuthRef,omitempty"`
	EntrypointSHRef       *apis.DataRef                          `json:"entrypointSHRef,omitempty"`
	ActionType            *clusteroperationv1alpha1.ActionType   `json:"actionType,omitempty"`
	Action                *string                                `json:"action,omitempty"`
	ActionSource          *clusteroperationv1alpha1.ActionSource `json:"actionSource,omitempty"`
	ActionSourceRef       *apis.DataRef                          `json:"actionSourceRef,omitempty"`
	ExtraArgs             *string                                `json:"extraArgs,omitempty"`
	Image                 *string                                `json:"image,omitempty"`
	PreHook               []HookActionApplyConfiguration         `json:"preHook,omitempty"`
	PostHook              []HookActionApplyConfiguration         `json:"postHook,omitempty"`
	Resources             *v1.ResourceRequirements               `json:"resources,omitempty"`
	ActiveDeadlineSeconds *int64                                 `json:"activeDeadlineSeconds,omitempty"`
}

// SpecApplyConfiguration constructs a declarative configuration of the Spec type for use with
// apply.
func Spec() *SpecApplyConfiguration {
	return &SpecApplyConfiguration{}
}

// WithCluster sets the Cluster field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cluster field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithCluster(value string) *SpecApplyConfiguration {
	b.Cluster = &value
	return b
}

// WithHostsConfRef sets the HostsConfRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostsConfRef field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithHostsConfRef(value apis.DataRef) *SpecApplyConfiguration {
	b.HostsConfRef = &value
	return b
}

// WithVarsConfRef sets the VarsConfRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VarsConfRef field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithVarsConfRef(value apis.DataRef) *SpecApplyConfiguration {
	b.VarsConfRef = &value
	return b
}

// WithSSHAuthRef sets the SSHAuthRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSHAuthRef field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithSSHAuthRef(value apis.DataRef) *SpecApplyConfiguration {
	b.SSHAuthRef = &value
	return b
}

// WithEntrypointSHRef sets the EntrypointSHRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntrypointSHRef field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithEntrypointSHRef(value apis.DataRef) *SpecApplyConfiguration {
	b.EntrypointSHRef = &value
	return b
}

// WithActionType sets the ActionType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActionType field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithActionType(value clusteroperationv1alpha1.ActionType) *SpecApplyConfiguration {
	b.ActionType = &value
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithAction(value string) *SpecApplyConfiguration {
	b.Action = &value
	return b
}

// WithActionSource sets the ActionSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActionSource field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithActionSource(value clusteroperationv1alpha1.ActionSource) *SpecApplyConfiguration {
	b.ActionSource = &value
	return b
}

// WithActionSourceRef sets the ActionSourceRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActionSourceRef field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithActionSourceRef(value apis.DataRef) *SpecApplyConfiguration {
	b.ActionSourceRef = &value
	return b
}

// WithExtraArgs sets the ExtraArgs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtraArgs field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithExtraArgs(value string) *SpecApplyConfiguration {
	b.ExtraArgs = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithImage(value string) *SpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithPreHook adds the given value to the PreHook field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PreHook field.
func (b *SpecApplyConfiguration) WithPreHook(values ...*HookActionApplyConfiguration) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPreHook")
		}
		b.PreHook = append(b.PreHook, *values[i])
	}
	return b
}

// WithPostHook adds the given value to the PostHook field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PostHook field.
func (b *SpecApplyConfiguration) WithPostHook(values ...*HookActionApplyConfiguration) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPostHook")
		}
		b.PostHook = append(b.PostHook, *values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *SpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActiveDeadlineSeconds field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithActiveDeadlineSeconds(value int64) *SpecApplyConfiguration {
	b.ActiveDeadlineSeconds = &value
	return b
}
