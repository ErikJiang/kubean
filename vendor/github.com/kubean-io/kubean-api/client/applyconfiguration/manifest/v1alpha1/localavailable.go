// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	manifestv1alpha1 "github.com/kubean-io/kubean-api/apis/manifest/v1alpha1"
)

// LocalAvailableApplyConfiguration represents a declarative configuration of the LocalAvailable type for use
// with apply.
type LocalAvailableApplyConfiguration struct {
	KubesprayImage *string                                `json:"kubesprayImage,omitempty"`
	Components     []*manifestv1alpha1.SoftwareInfoStatus `json:"components,omitempty"`
	Docker         []*manifestv1alpha1.DockerInfoStatus   `json:"docker,omitempty"`
}

// LocalAvailableApplyConfiguration constructs a declarative configuration of the LocalAvailable type for use with
// apply.
func LocalAvailable() *LocalAvailableApplyConfiguration {
	return &LocalAvailableApplyConfiguration{}
}

// WithKubesprayImage sets the KubesprayImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubesprayImage field is set to the value of the last call.
func (b *LocalAvailableApplyConfiguration) WithKubesprayImage(value string) *LocalAvailableApplyConfiguration {
	b.KubesprayImage = &value
	return b
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *LocalAvailableApplyConfiguration) WithComponents(values ...**manifestv1alpha1.SoftwareInfoStatus) *LocalAvailableApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponents")
		}
		b.Components = append(b.Components, *values[i])
	}
	return b
}

// WithDocker adds the given value to the Docker field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Docker field.
func (b *LocalAvailableApplyConfiguration) WithDocker(values ...**manifestv1alpha1.DockerInfoStatus) *LocalAvailableApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDocker")
		}
		b.Docker = append(b.Docker, *values[i])
	}
	return b
}
