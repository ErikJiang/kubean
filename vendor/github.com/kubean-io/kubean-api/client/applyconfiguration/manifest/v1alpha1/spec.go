// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	manifestv1alpha1 "github.com/kubean-io/kubean-api/apis/manifest/v1alpha1"
)

// SpecApplyConfiguration represents a declarative configuration of the Spec type for use
// with apply.
type SpecApplyConfiguration struct {
	LocalService     *LocalServiceApplyConfiguration  `json:"localService,omitempty"`
	KubesprayVersion *string                          `json:"kubesprayVersion,omitempty"`
	KubeanVersion    *string                          `json:"kubeanVersion,omitempty"`
	Components       []*manifestv1alpha1.SoftwareInfo `json:"components,omitempty"`
	Docker           []*manifestv1alpha1.DockerInfo   `json:"docker,omitempty"`
}

// SpecApplyConfiguration constructs a declarative configuration of the Spec type for use with
// apply.
func Spec() *SpecApplyConfiguration {
	return &SpecApplyConfiguration{}
}

// WithLocalService sets the LocalService field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalService field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithLocalService(value *LocalServiceApplyConfiguration) *SpecApplyConfiguration {
	b.LocalService = value
	return b
}

// WithKubesprayVersion sets the KubesprayVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubesprayVersion field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithKubesprayVersion(value string) *SpecApplyConfiguration {
	b.KubesprayVersion = &value
	return b
}

// WithKubeanVersion sets the KubeanVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubeanVersion field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithKubeanVersion(value string) *SpecApplyConfiguration {
	b.KubeanVersion = &value
	return b
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *SpecApplyConfiguration) WithComponents(values ...**manifestv1alpha1.SoftwareInfo) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponents")
		}
		b.Components = append(b.Components, *values[i])
	}
	return b
}

// WithDocker adds the given value to the Docker field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Docker field.
func (b *SpecApplyConfiguration) WithDocker(values ...**manifestv1alpha1.DockerInfo) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDocker")
		}
		b.Docker = append(b.Docker, *values[i])
	}
	return b
}
