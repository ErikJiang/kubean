// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// DockerInfoApplyConfiguration represents a declarative configuration of the DockerInfo type for use
// with apply.
type DockerInfoApplyConfiguration struct {
	OS             *string  `json:"os,omitempty"`
	DefaultVersion *string  `json:"defaultVersion,omitempty"`
	VersionRange   []string `json:"versionRange,omitempty"`
}

// DockerInfoApplyConfiguration constructs a declarative configuration of the DockerInfo type for use with
// apply.
func DockerInfo() *DockerInfoApplyConfiguration {
	return &DockerInfoApplyConfiguration{}
}

// WithOS sets the OS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OS field is set to the value of the last call.
func (b *DockerInfoApplyConfiguration) WithOS(value string) *DockerInfoApplyConfiguration {
	b.OS = &value
	return b
}

// WithDefaultVersion sets the DefaultVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultVersion field is set to the value of the last call.
func (b *DockerInfoApplyConfiguration) WithDefaultVersion(value string) *DockerInfoApplyConfiguration {
	b.DefaultVersion = &value
	return b
}

// WithVersionRange adds the given value to the VersionRange field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VersionRange field.
func (b *DockerInfoApplyConfiguration) WithVersionRange(values ...string) *DockerInfoApplyConfiguration {
	for i := range values {
		b.VersionRange = append(b.VersionRange, values[i])
	}
	return b
}
