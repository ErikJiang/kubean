// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/kubean-io/kubean-api/apis/cluster/v1alpha1"
	clusteroperationv1alpha1 "github.com/kubean-io/kubean-api/apis/clusteroperation/v1alpha1"
	localartifactsetv1alpha1 "github.com/kubean-io/kubean-api/apis/localartifactset/v1alpha1"
	manifestv1alpha1 "github.com/kubean-io/kubean-api/apis/manifest/v1alpha1"
	clusterv1alpha1 "github.com/kubean-io/kubean-api/client/applyconfiguration/cluster/v1alpha1"
	applyconfigurationclusteroperationv1alpha1 "github.com/kubean-io/kubean-api/client/applyconfiguration/clusteroperation/v1alpha1"
	internal "github.com/kubean-io/kubean-api/client/applyconfiguration/internal"
	applyconfigurationlocalartifactsetv1alpha1 "github.com/kubean-io/kubean-api/client/applyconfiguration/localartifactset/v1alpha1"
	applyconfigurationmanifestv1alpha1 "github.com/kubean-io/kubean-api/client/applyconfiguration/manifest/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=cluster.kubean.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("Cluster"):
		return &clusterv1alpha1.ClusterApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ClusterCondition"):
		return &clusterv1alpha1.ClusterConditionApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Spec"):
		return &clusterv1alpha1.SpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Status"):
		return &clusterv1alpha1.StatusApplyConfiguration{}

		// Group=clusteroperation.kubean.io, Version=v1alpha1
	case clusteroperationv1alpha1.SchemeGroupVersion.WithKind("ClusterOperation"):
		return &applyconfigurationclusteroperationv1alpha1.ClusterOperationApplyConfiguration{}
	case clusteroperationv1alpha1.SchemeGroupVersion.WithKind("HookAction"):
		return &applyconfigurationclusteroperationv1alpha1.HookActionApplyConfiguration{}
	case clusteroperationv1alpha1.SchemeGroupVersion.WithKind("Spec"):
		return &applyconfigurationclusteroperationv1alpha1.SpecApplyConfiguration{}
	case clusteroperationv1alpha1.SchemeGroupVersion.WithKind("Status"):
		return &applyconfigurationclusteroperationv1alpha1.StatusApplyConfiguration{}

		// Group=localartifactset.kubean.io, Version=v1alpha1
	case localartifactsetv1alpha1.SchemeGroupVersion.WithKind("DockerInfo"):
		return &applyconfigurationlocalartifactsetv1alpha1.DockerInfoApplyConfiguration{}
	case localartifactsetv1alpha1.SchemeGroupVersion.WithKind("LocalArtifactSet"):
		return &applyconfigurationlocalartifactsetv1alpha1.LocalArtifactSetApplyConfiguration{}
	case localartifactsetv1alpha1.SchemeGroupVersion.WithKind("SoftwareInfo"):
		return &applyconfigurationlocalartifactsetv1alpha1.SoftwareInfoApplyConfiguration{}
	case localartifactsetv1alpha1.SchemeGroupVersion.WithKind("Spec"):
		return &applyconfigurationlocalartifactsetv1alpha1.SpecApplyConfiguration{}

		// Group=manifest.kubean.io, Version=v1alpha1
	case manifestv1alpha1.SchemeGroupVersion.WithKind("DockerInfo"):
		return &applyconfigurationmanifestv1alpha1.DockerInfoApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("DockerInfoStatus"):
		return &applyconfigurationmanifestv1alpha1.DockerInfoStatusApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("HostsMap"):
		return &applyconfigurationmanifestv1alpha1.HostsMapApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("ImageRepoPasswordAuth"):
		return &applyconfigurationmanifestv1alpha1.ImageRepoPasswordAuthApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("LocalAvailable"):
		return &applyconfigurationmanifestv1alpha1.LocalAvailableApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("LocalService"):
		return &applyconfigurationmanifestv1alpha1.LocalServiceApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("Manifest"):
		return &applyconfigurationmanifestv1alpha1.ManifestApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("SoftwareInfo"):
		return &applyconfigurationmanifestv1alpha1.SoftwareInfoApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("SoftwareInfoStatus"):
		return &applyconfigurationmanifestv1alpha1.SoftwareInfoStatusApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("Spec"):
		return &applyconfigurationmanifestv1alpha1.SpecApplyConfiguration{}
	case manifestv1alpha1.SchemeGroupVersion.WithKind("Status"):
		return &applyconfigurationmanifestv1alpha1.StatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
