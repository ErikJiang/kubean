// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	localartifactsetv1alpha1 "github.com/kubean-io/kubean-api/apis/localartifactset/v1alpha1"
)

// SpecApplyConfiguration represents a declarative configuration of the Spec type for use
// with apply.
type SpecApplyConfiguration struct {
	Arch      []string                                 `json:"arch,omitempty"`
	Kubespray *string                                  `json:"kubespray,omitempty"`
	Items     []*localartifactsetv1alpha1.SoftwareInfo `json:"items,omitempty"`
	Docker    []*localartifactsetv1alpha1.DockerInfo   `json:"docker,omitempty"`
}

// SpecApplyConfiguration constructs a declarative configuration of the Spec type for use with
// apply.
func Spec() *SpecApplyConfiguration {
	return &SpecApplyConfiguration{}
}

// WithArch adds the given value to the Arch field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Arch field.
func (b *SpecApplyConfiguration) WithArch(values ...string) *SpecApplyConfiguration {
	for i := range values {
		b.Arch = append(b.Arch, values[i])
	}
	return b
}

// WithKubespray sets the Kubespray field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kubespray field is set to the value of the last call.
func (b *SpecApplyConfiguration) WithKubespray(value string) *SpecApplyConfiguration {
	b.Kubespray = &value
	return b
}

// WithItems adds the given value to the Items field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Items field.
func (b *SpecApplyConfiguration) WithItems(values ...**localartifactsetv1alpha1.SoftwareInfo) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithItems")
		}
		b.Items = append(b.Items, *values[i])
	}
	return b
}

// WithDocker adds the given value to the Docker field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Docker field.
func (b *SpecApplyConfiguration) WithDocker(values ...**localartifactsetv1alpha1.DockerInfo) *SpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDocker")
		}
		b.Docker = append(b.Docker, *values[i])
	}
	return b
}
