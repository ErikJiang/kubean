// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	manifestv1alpha1 "github.com/kubean-io/kubean-api/apis/manifest/v1alpha1"
)

// LocalServiceApplyConfiguration represents a declarative configuration of the LocalService type for use
// with apply.
type LocalServiceApplyConfiguration struct {
	ImageRepo       map[manifestv1alpha1.ImageRepoType]string `json:"imageRepo,omitempty"`
	ImageRepoAuth   []ImageRepoPasswordAuthApplyConfiguration `json:"imageRepoAuth,omitempty"`
	ImageRepoScheme *manifestv1alpha1.ImageRepoScheme         `json:"imageRepoScheme,omitempty"`
	FilesRepo       *string                                   `json:"filesRepo,omitempty"`
	YumRepos        map[string][]string                       `json:"yumRepos,omitempty"`
	HostsMap        []*manifestv1alpha1.HostsMap              `json:"hostsMap,omitempty"`
}

// LocalServiceApplyConfiguration constructs a declarative configuration of the LocalService type for use with
// apply.
func LocalService() *LocalServiceApplyConfiguration {
	return &LocalServiceApplyConfiguration{}
}

// WithImageRepo puts the entries into the ImageRepo field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ImageRepo field,
// overwriting an existing map entries in ImageRepo field with the same key.
func (b *LocalServiceApplyConfiguration) WithImageRepo(entries map[manifestv1alpha1.ImageRepoType]string) *LocalServiceApplyConfiguration {
	if b.ImageRepo == nil && len(entries) > 0 {
		b.ImageRepo = make(map[manifestv1alpha1.ImageRepoType]string, len(entries))
	}
	for k, v := range entries {
		b.ImageRepo[k] = v
	}
	return b
}

// WithImageRepoAuth adds the given value to the ImageRepoAuth field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImageRepoAuth field.
func (b *LocalServiceApplyConfiguration) WithImageRepoAuth(values ...*ImageRepoPasswordAuthApplyConfiguration) *LocalServiceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImageRepoAuth")
		}
		b.ImageRepoAuth = append(b.ImageRepoAuth, *values[i])
	}
	return b
}

// WithImageRepoScheme sets the ImageRepoScheme field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageRepoScheme field is set to the value of the last call.
func (b *LocalServiceApplyConfiguration) WithImageRepoScheme(value manifestv1alpha1.ImageRepoScheme) *LocalServiceApplyConfiguration {
	b.ImageRepoScheme = &value
	return b
}

// WithFilesRepo sets the FilesRepo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FilesRepo field is set to the value of the last call.
func (b *LocalServiceApplyConfiguration) WithFilesRepo(value string) *LocalServiceApplyConfiguration {
	b.FilesRepo = &value
	return b
}

// WithYumRepos puts the entries into the YumRepos field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the YumRepos field,
// overwriting an existing map entries in YumRepos field with the same key.
func (b *LocalServiceApplyConfiguration) WithYumRepos(entries map[string][]string) *LocalServiceApplyConfiguration {
	if b.YumRepos == nil && len(entries) > 0 {
		b.YumRepos = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.YumRepos[k] = v
	}
	return b
}

// WithHostsMap adds the given value to the HostsMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostsMap field.
func (b *LocalServiceApplyConfiguration) WithHostsMap(values ...**manifestv1alpha1.HostsMap) *LocalServiceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHostsMap")
		}
		b.HostsMap = append(b.HostsMap, *values[i])
	}
	return b
}
