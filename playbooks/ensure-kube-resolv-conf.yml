- name: Ensure kube_resolv_conf exists
  hosts: k8s_cluster,etcd
  gather_facts: true
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  become: true
  vars:
    kube_config_dir: /etc/kubernetes
    upstream_dns_servers: []
  roles:
  - kubespray-defaults
  tasks:
  - name: Ensure kube_resolv_conf exists
    when: kube_resolv_conf is defined and kube_resolv_conf != ""
    block:
    - name: Check if kube_resolv_conf exists
      stat:
        path: "{{ kube_resolv_conf }}"
      register: kube_resolv_conf_stat
    - name: Ensure kube_resolv_conf directory exists
      file:
        path: "{{ kube_resolv_conf | dirname }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: not kube_resolv_conf_stat.stat.exists

    - name: Check if systemd-resolved is running
      systemd_service:
        name: systemd-resolved
      register: systemd_resolved_status
      check_mode: true
      failed_when: false
      when: not kube_resolv_conf_stat.stat.exists

    - name: Get resovlectl_nameservers
      when: 
      - not kube_resolv_conf_stat.stat.exists
      - systemd_resolved_status.status.SubState == 'running'
      block:
      - name: Get resovlectl_nameservers
        shell: |
          resolvectl dns | awk -F : '{print $2}' | sed ':a;N;s/\n/ /;ba'
        register: resovlectl_nameservers
      - name: Set resovlectl_nameservers
        set_fact:
          resovlectl_nameservers: "{{ resovlectl_nameservers.stdout | split(' ') }}"

    - name: Import specific task from kubernetes/preinstall role
      import_role:
        name: kubernetes/preinstall
        tasks_from: 0020-set_facts.yml
      when: not kube_resolv_conf_stat.stat.exists

    - name: Write domain/search/nameserver/options to kube_resolv_conf
      vars:
        resovlectl_nameservers: []
      blockinfile:
        path: "{{ kube_resolv_conf }}"
        block: |
          search default.svc.{{ dns_domain }} svc.{{ dns_domain }}
          nameserver {{ skydns_server }}
          {% for item in upstream_dns_servers %}
          nameserver {{ item }}
          {% endfor %}
          {% for item in (((configured_nameservers + resovlectl_nameservers) | unique | select | list | difference([skydns_server]) | reject('search', '^127\.'))[:2] if not disable_host_nameservers else []) %}
          nameserver {{ item }}
          {% endfor %}
          options ndots:{{ ndots }} timeout:{{ dns_timeout | default('2') }} attempts:{{ dns_attempts | default('2') }}
        create: true
        owner: root
        group: root
        mode: '0644'
        insertbefore: BOF
        marker: "# Ansible entries {mark}"
      when: not kube_resolv_conf_stat.stat.exists